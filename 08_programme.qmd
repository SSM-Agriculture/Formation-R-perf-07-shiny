# Le programme complet {.backgroundTitre}

## Le programme complet

-   Pour ensuite lancer l'application définie, on utilise la fonction ShinyApp, en appelant les parties ui et server.

```{.r}
ui <- fluidPage( … )

server <- function(input, output, session) { 
… 
}

ShinyApp(ui, server)
```

-   On lance ensuite le programme normalement.


## Le programme complet

<br>

On peut rajouter du CSS, du JavaScript, ...

<br>

- Détails des fonctions : <https://shiny.rstudio.com/reference/shiny/latest/>

- Des possibilités infinies (voir cette galerie inspirante) : <https://shiny.rstudio.com/gallery/>

## Exercice Server (1/3)

::: {.callout-tip icon=false}
## Exercice - partie Server

L'interface est prête, on va maintenant écrire les traitements réalisés par le programme, c'est-à-dire la partie serveur.   
5) Dans la fonction server, créez un observeEvent qui se déclenche quand on clique sur le bouton.  
  
6) Filtrez la table sur la région choisie via la liste déroulante (affectez le résultat dans une nouvelle table).  
  
7) En utilisant summarise, créer une table contenant, par département, la moyenne, le maximum, le minimum et la somme des populations (Pop_mun_2011). Affectez cette table à l'outputId de l'interface pour l'afficher (en utilisant renderTable).  

Exécutez le programme.
:::

## Exercice Server (2/3)

::: {.callout-tip icon=false}
## Exercice - partie Server

8) A l'aide de conditions, créez la table sur la donnée choisie (Pop_mun_2011, Altitude ou Superficie).  
Exécutez le programme.  
  
9) Dans l'observeEvent, remplacer l'inputId du bouton, par un vecteur contenant les inputId des 2 listes déroulantes.  
Exécutez le programme.  
  
La mise à jour du tableau se fait maintenant dès qu'on change une valeur des listes déroulantes. Vous pouvez supprimer le bouton dans l'interface.
:::

## Exercice Server (2/3)

![](img/clipboard-ex-server.png){fig-align="center"}